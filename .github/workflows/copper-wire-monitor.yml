name: Copper Wire Sale Monitor

on:
  schedule:
    - cron: "0 */3 * * *"  # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  workflow_dispatch:

jobs:
  check_posts:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4

    - name: Run monitor script
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        CHAT_ID: ${{ secrets.CHAT_ID }}
      run: |
        python <<'EOF'
        import requests, re, html, datetime, hashlib
        from urllib.parse import quote, urlparse
        from bs4 import BeautifulSoup

        # =============================
        # ‚öôÔ∏è CONFIG
        # =============================
        BOT_TOKEN = "${{ secrets.BOT_TOKEN }}"
        CHAT_ID   = "${{ secrets.CHAT_ID }}"
        TIMEOUT   = 20

        HEADERS = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36",
            "Accept-Language": "th-TH,th;q=0.9,en-US;q=0.8,en;q=0.7",
        }

        SALE_TERMS = ["‡∏Ç‡∏≤‡∏¢", "‡∏õ‡∏•‡πà‡∏≠‡∏¢", "‡πÇ‡∏•‡πä‡∏∞", "‡∏¢‡∏Å‡∏•‡πá‡∏≠‡∏ï", "‡πÄ‡∏´‡∏°‡∏≤‡∏Ç‡∏≤‡∏¢"]
        BUY_NEGATIVE = ["‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠", "‡∏ã‡∏∑‡πâ‡∏≠", "‡∏ï‡∏≤‡∏°‡∏´‡∏≤", "‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠", "‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏õ‡∏≠‡∏Å", "‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á"]
        WIRE_TERMS = [
            "‡∏™‡∏≤‡∏¢‡πÑ‡∏ü", "‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á", "‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡πÄ‡∏Å‡πà‡∏≤", "‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏£‡∏ß‡∏°",
            "vaf", "vct", "nyy", "thw", "tvvb",
            "‡∏™‡∏≤‡∏¢‡∏•‡∏¥‡∏ü‡∏ï‡πå", "‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ô‡∏Ç‡∏≤‡∏ß", "‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ô‡πÄ‡∏ó‡∏≤",
            "copper wire scrap", "copper cable scrap", "‡∏õ‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡πÑ‡∏ü"
        ]
        SALE_KEYWORDS = [
            "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏ó‡∏≠‡∏á‡πÅ‡∏î‡∏á", "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡πÄ‡∏Å‡πà‡∏≤", "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏£‡∏ß‡∏°",
            "‡∏Ç‡∏≤‡∏¢ vaf", "‡∏Ç‡∏≤‡∏¢ vct", "‡∏Ç‡∏≤‡∏¢ nyy", "‡∏Ç‡∏≤‡∏¢ thw",
            "‡∏Ç‡∏≤‡∏¢ tvvb", "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏•‡∏¥‡∏ü‡∏ï‡πå", "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ô‡∏Ç‡∏≤‡∏ß", "‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ô‡πÄ‡∏ó‡∏≤"
        ]

        FOCUS_LOCS = [
            "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ", "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û", "‡∏Å‡∏ó‡∏°", "Bangkok", "Nonthaburi",
            "‡∏ö‡∏≤‡∏á‡∏ö‡∏±‡∏ß‡∏ó‡∏≠‡∏á", "‡∏£‡∏≤‡∏°‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏≤", "‡∏°‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ö‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà", "‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ß‡∏¢",
            "‡∏ï‡∏¥‡∏ß‡∏≤‡∏ô‡∏ô‡∏ó‡πå", "‡∏ö‡∏≤‡∏á‡πÅ‡∏Ñ", "‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏µ‡πà", "‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏ä‡∏±‡∏ô",
            "‡∏•‡∏≤‡∏î‡∏û‡∏£‡πâ‡∏≤‡∏ß", "‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£", "‡∏ö‡∏≤‡∏á‡∏Ç‡∏∏‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô", "‡∏•‡∏≥‡∏•‡∏π‡∏Å‡∏Å‡∏≤"
        ]

        # =============================
        # üß† UTILITIES
        # =============================
        def contains_sale_keywords(text: str) -> bool:
            t = (text or "").lower()
            if any(neg in t for neg in BUY_NEGATIVE):
                return False
            if any(kw in t for kw in [s.lower() for s in SALE_KEYWORDS]):
                return True
            if any(s in t for s in SALE_TERMS) and any(w in t for w in WIRE_TERMS):
                return True
            return False

        def extract_price(text: str):
            p = re.search(r"(\d{2,6}(?:[,\d]{0,3})?)\s*(?:‡∏ö‡∏≤‡∏ó|‡∏ö\.|‡∏ø)\s*(?:\/|\s*)?(?:‡∏Å‡∏Å\.|kg)?", text or "", flags=re.I)
            if p:
                try:
                    return int(p.group(1).replace(",", ""))
                except Exception:
                    return p.group(1)
            return None

        def extract_weight(text: str):
            w = re.search(r"(\d{1,4})\s*(‡∏Å‡∏Å\.|‡∏Å‡∏¥‡πÇ‡∏•|‡πÇ‡∏•|kg|‡∏ï‡∏±‡∏ô)", text or "", flags=re.I)
            if not w:
                return None
            val = float(w.group(1))
            if "‡∏ï‡∏±‡∏ô" in w.group(2):
                val *= 1000
            return f"{val:.0f} ‡∏Å‡∏Å."

        def detect_location(text: str):
            for loc in FOCUS_LOCS:
                if loc.lower() in (text or "").lower():
                    return loc
            return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

        def detect_wire_type(text: str):
            for t in ["VAF","VCT","NYY","THW","TVVB","‡∏™‡∏≤‡∏¢‡∏•‡∏¥‡∏ü‡∏ï‡πå","‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ô‡∏Ç‡∏≤‡∏ß","‡∏™‡∏≤‡∏¢‡πÅ‡∏ö‡∏ô‡πÄ‡∏ó‡∏≤"]:
                if t.lower() in (text or "").lower():
                    return t
            if "‡∏™‡∏≤‡∏¢" in (text or ""):
                return "‡∏™‡∏≤‡∏¢‡πÑ‡∏ü‡∏£‡∏ß‡∏°"
            return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

        def notify(msg):
            requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                data={"chat_id": CHAT_ID, "text": msg, "parse_mode": "HTML"},
                timeout=TIMEOUT
            )

        def pack_message(item):
            return (
                f"üîî ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà ({item.get('platform')})\n"
                f"‡∏Å‡∏•‡∏∏‡πà‡∏°/‡πÄ‡∏û‡∏à: {item.get('group')}\n"
                f"‡∏£‡∏≤‡∏Ñ‡∏≤: {item.get('price')} ‡∏ö‡∏≤‡∏ó\n"
                f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: {item.get('weight')}\n"
                f"‡∏™‡∏≤‡∏¢: {item.get('wire')}\n"
                f"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {item.get('location')}\n"
                f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {item.get('title')[:200]}\n"
                f"‡∏•‡∏¥‡∏á‡∏Å‡πå: {item.get('url')}"
            )

        # =============================
        # üîé SCRAPER
        # =============================
        def fetch_pantipmarket():
            items = []
            base = "https://www.pantipmarket.com/search.php?keyword="
            for kw in SALE_KEYWORDS:
                r = requests.get(base + quote(kw), headers=HEADERS, timeout=TIMEOUT)
                if r.status_code != 200:
                    continue
                soup = BeautifulSoup(r.text, "html.parser")
                for a in soup.select("a[href*='item.php?']"):
                    title = a.get_text(" ", strip=True)
                    if not contains_sale_keywords(title):
                        continue
                    href = a.get("href")
                    full = href if href.startswith("http") else "https://www.pantipmarket.com/" + href
                    item = {
                        "platform": "Pantipmarket",
                        "group": "Pantipmarket",
                        "title": title,
                        "price": extract_price(title),
                        "weight": extract_weight(title),
                        "wire": detect_wire_type(title),
                        "location": detect_location(title),
                        "url": full
                    }
                    items.append(item)
            return items

        def fetch_kaidee():
            items = []
            base = "https://www.kaidee.com/s?q="
            for kw in SALE_KEYWORDS:
                r = requests.get(base + quote(kw), headers=HEADERS, timeout=TIMEOUT)
                if r.status_code != 200:
                    continue
                soup = BeautifulSoup(r.text, "html.parser")
                for a in soup.select("a[href*='/product/']"):
                    title = a.get_text(" ", strip=True)
                    if not contains_sale_keywords(title):
                        continue
                    href = a.get("href")
                    full = href if href.startswith("http") else "https://www.kaidee.com" + href
                    item = {
                        "platform": "Kaidee",
                        "group": "Kaidee",
                        "title": title,
                        "price": extract_price(title),
                        "weight": extract_weight(title),
                        "wire": detect_wire_type(title),
                        "location": detect_location(title),
                        "url": full
                    }
                    items.append(item)
            return items

        # =============================
        # üöÄ MAIN
        # =============================
        print("[*] Checking for new posts...")
        results = []
        try:
            results += fetch_pantipmarket()
        except Exception as e:
            print("Pantip error:", e)
        try:
            results += fetch_kaidee()
        except Exception as e:
            print("Kaidee error:", e)

        if not results:
            notify("‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
        else:
            for it in results[:5]:
                notify(pack_message(it))
        print("[*] Done.")
        EOF
